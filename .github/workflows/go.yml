name: Go

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read Version
        id: get-version
        run: |
          version=$(cat version.txt)
          echo "::set-output name=version::$version"
        shell: bash

  build_amd64:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Builds Directory
        run: mkdir -p ./builds

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.3'

      - name: Set GOOS and GOARCH for amd64
        run: |
          export GOOS=linux
          export GOARCH=amd64
        shell: bash

      - name: Build for amd64
        run: go build -o jeopardy_amd64
        working-directory: ./builds 

      - name: Test
        run: go test -v ./...

  build_arm:
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Builds Directory
        run: mkdir -p ./builds

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21.3'

      - name: Set GOOS and GOARCH for ARM
        run: |
          export GOOS=linux
          export GOARCH=arm
        shell: bash

      - name: Build for ARM
        run: go build -o jeopardy_arm
        working-directory: ./builds 

      - name: Test
        run: go test -v ./...

  create-tag:
    needs: get-version
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Create Git Tag
        run: |
          version=${{ needs.get-version.outputs.version }}
          git tag -a v${version} -m "Version ${version}"
          git push origin v${version}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: [build_amd64, build_arm, create-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v{{ needs.get-version.outputs.version }}
          release_name: Release {{ needs.get-version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/jeopardy_amd64
          asset_name: jeopardy_amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (ARM)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/jeopardy_arm
          asset_name: jeopardy_arm
          asset_content_type: application/octet-stream